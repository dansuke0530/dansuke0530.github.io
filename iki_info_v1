<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>本日の壱岐島情報</title>
  <link href="https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'M PLUS Rounded 1c', sans-serif;
      width: 360px;
      background: #e0f7fa;
      padding: 20px;
      border: 2px solid #4db6ac;
      border-radius: 20px;
    }
    h1 {
      font-size: 28px;
      text-align: center;
      margin-bottom: 10px;
      color: #00695c;
    }
    #today-date {
      text-align: center;
      font-size: 22px;
      color: #004d40;
      margin-bottom: 20px;
    }
    .section {
      background: #ffffff;
      border: 2px solid #b2dfdb;
      border-radius: 16px;
      padding: 15px;
      margin-bottom: 20px;
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }
    .section h2 {
      font-size: 20px;
      color: #00796b;
      margin-bottom: 10px;
      border-left: 5px solid #4db6ac;
      padding-left: 8px;
    }
    .item {
      margin: 10px 0;
      font-size: 17px;
      color: #555;
    }
    .date {
      font-weight: bold;
      font-size: 18px;
      margin-top: 10px;
      color: #0288d1;
    }
    .tide-time, .tide-recommend, .tide-max {
      font-size: 18px;
      margin-left: 10px;
      display: block;
      margin-top: 5px;
    }
    .tide-recommend {
      color: #ff8f00;
      font-weight: bold;
      font-size: 19px;
    }
    .tide-max {
      color: #6a1b9a;
      font-weight: bold;
    }
    .status {
      font-weight: bold;
    }
    .status.normal {
      color: #43a047;
    }
    .status.caution {
      color: orange;
    }
    .status.cancel {
      color: red;
    }
    .status.unknown {
      color: #3498db;
    }
    small {
      font-size: 13px;
      color: #999;
      display: block;
      margin-top: 8px;
    }
    .weather-icon {
      vertical-align: middle;
      width: 30px;
      height: 30px;
      margin-right: 5px;
    }
    .weather-label {
      font-weight: bold;
      color: #00695c;
      font-size: 17px;
    }
  </style>
</head>
<body>

<h1>本日の壱岐島情報</h1>
<div id="today-date">読み込み中...</div>

<div class="section" id="weather">
  <h2>天気予報</h2>
  <div id="weather-content">読み込み中...</div>
</div>

<div class="section" id="tide">
  <h2>小島神社の潮汐</h2>
  <div id="tide-content">読み込み中...</div>
</div>

<div class="section" id="ferry">
  <h2>次の便の運行状況</h2>
  <div id="ferry-status">読み込み中...</div>
  <div id="jetfoil-status"></div>
  <div id="flight-status"></div>
  <small>※テストデータ</small>
</div>

<script>
// ▼今日の日付を表示
function displayTodayDate() {
  const today = new Date();
  const weekdays = ['日', '月', '火', '水', '木', '金', '土'];
  const y = today.getFullYear();
  const m = today.getMonth() + 1;
  const d = today.getDate();
  const w = weekdays[today.getDay()];
  document.getElementById('today-date').innerText = `${y}年${m}月${d}日（${w}）`;
}
displayTodayDate();

// ▼潮汐データをGitHubから取得
const tideUrl = 'https://dansuke0530.github.io/pdf2json.json'; // あなたのjsonファイルURL

fetch(tideUrl)
  .then(response => response.json())
  .then(data => {
    const tideSection = document.getElementById('tide-content');
    tideSection.innerHTML = '';

    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const tomorrow = new Date(today.getTime() + 86400000);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];

    const targetDates = [todayStr, tomorrowStr];

    targetDates.forEach(date => {
      const tideData = data.find(d => d.date === date);
      if (tideData) {
        const div = document.createElement('div');
        div.className = 'item';
        div.innerHTML = `<span class="date">${date}</span><br>`;
        div.innerHTML += `<span class="tide-max">満潮: ${tideData.high_tide.join(' / ')}</span>`;
        div.innerHTML += `<span class="tide-max">干潮: ${tideData.low_tide.join(' / ')}</span>`;

        tideData.low_tide.forEach(tide => {
          const start = addMinutesToTime(tide, -30);
          const end = addMinutesToTime(tide, 30);
          if (isDaytime(start, end)) {
            div.innerHTML += `<span class="tide-recommend">参拝おすすめ時間 →→ ${start}〜${end}</span>`;
          }
        });

        tideSection.appendChild(div);
      } else {
        tideSection.innerHTML += `<div class="item">データが見つかりません (${date})</div>`;
      }
    });
  })
  .catch(error => {
    console.error('潮汐データ読み込みエラー:', error);
    document.getElementById('tide-content').innerHTML = 'データ取得エラー';
  });

// ▼時間計算補助関数
function addMinutesToTime(time, mins) {
  const [h, m] = time.split(':').map(Number);
  const date = new Date();
  date.setHours(h, m);
  date.setMinutes(date.getMinutes() + mins);
  const hh = String(date.getHours()).padStart(2, '0');
  const mm = String(date.getMinutes()).padStart(2, '0');
  return `${hh}:${mm}`;
}

// ▼昼間判定（5:30〜18:45）
function timeToMinutes(time) {
  const [h, m] = time.split(':').map(Number);
  return h * 60 + m;
}
function isDaytime(start, end) {
  const sunriseMin = timeToMinutes('05:30');
  const sunsetMin = timeToMinutes('18:45');
  const startMin = timeToMinutes(start);
  const endMin = timeToMinutes(end);
  return startMin >= sunriseMin && endMin <= sunsetMin;
}
// ▼天気ダミーデータ
const weatherPatterns = [
  { description: "晴れ", icon: "01d" },
  { description: "晴れのち曇り", icon: "02d" },
  { description: "曇り", icon: "03d" },
  { description: "曇り時々晴れ", icon: "04d" },
  { description: "雨", icon: "09d" },
  { description: "雨時々曇り", icon: "10d" },
  { description: "雷", icon: "11d" },
  { description: "雪", icon: "13d" },
  { description: "霧", icon: "50d" }
];

function displayWeather() {
  const weatherSection = document.getElementById('weather-content');
  weatherSection.innerHTML = '';

  const labels = ["今日の天気", "明日の天気", "明後日の天気"];
  for (let i = 0; i < 3; i++) {
    const div = document.createElement('div');
    div.className = 'item';
    div.id = `weather-day-${i}`;
    weatherSection.appendChild(div);
  }

  setInterval(() => {
    for (let i = 0; i < 3; i++) {
      const randomWeather = weatherPatterns[Math.floor(Math.random() * weatherPatterns.length)];
      document.getElementById(`weather-day-${i}`).innerHTML = `
        <span class="weather-label">${labels[i]}</span><br>
        <img class="weather-icon" src="http://openweathermap.org/img/wn/${randomWeather.icon}.png" alt="天気">
        ${randomWeather.description}
      `;
    }
  }, 1500);
}
displayWeather();

// ▼交通情報（フェリー・ジェット・飛行機）
function displayStatus() {
  const ferryStatus = document.getElementById('ferry-status');
  const jetfoilStatus = document.getElementById('jetfoil-status');
  const flightStatus = document.getElementById('flight-status');

  const statusList = ['normal', 'caution', 'cancel'];
  const flightStatusList = ['normal', 'cancel', 'unknown'];
  const statusText = {
    normal: '通常運航',
    caution: '出航1時間前判断',
    cancel: '欠航',
    unknown: '情報未確定'
  };

  setInterval(() => {
    const ferry = statusList[Math.floor(Math.random() * statusList.length)];
    ferryStatus.innerHTML = `<div class="item"><span class="status ${ferry}">フェリー: ${statusText[ferry]}</span></div>`;
  }, 2000);

  setInterval(() => {
    const jetfoil = statusList[Math.floor(Math.random() * statusList.length)];
    jetfoilStatus.innerHTML = `<div class="item"><span class="status ${jetfoil}">ジェットフォイル: ${statusText[jetfoil]}</span></div>`;
  }, 2200);

  setInterval(() => {
    const flight = flightStatusList[Math.floor(Math.random() * flightStatusList.length)];
    flightStatus.innerHTML = `<div class="item"><span class="status ${flight}">飛行機: ${statusText[flight]}</span></div>`;
  }, 2400);
}
displayStatus();
</script>

</body>
</html>
